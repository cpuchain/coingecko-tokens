import { readFile, writeFile } from 'fs/promises';
import { getAddress } from 'ethers';
import { TokenInfo } from '@uniswap/token-lists';
import { getCoingekoLists } from './getCoingeko';
import { getTopTokens } from './getTopTokens';

const fileHeader = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { TokenList } from '@uniswap/token-lists';

export const tokenlist: TokenList = `;

export async function getPinnedList() {
    return JSON.parse(await readFile('./pinnedTokens.json', { encoding: 'utf8' })) as TokenInfo[];
}

async function main() {
    const lists = await getCoingekoLists();
    const pinnedTokens = await getPinnedList();
    const topTokensSet = await getTopTokens();

    const tokenList = lists[0];

    lists.forEach((list) => {
        tokenList.tokens.push(...list.tokens);
    });

    // format token addresses since coingecko doesn't
    tokenList.tokens.forEach((token) => {
        // @ts-expect-error override read-only
        token.address = getAddress(token.address);
    });

    const chains = [...new Set(tokenList.tokens.map(({ chainId }) => chainId))];

    console.log(`Got ${tokenList.tokens.length} tokens of ${chains.join(', ')} chains from coingecko`);

    /**
     * Init top 1000 tokens
     */
    const newTokenList = { ...tokenList };

    newTokenList.tokens = newTokenList.tokens.filter((t) => topTokensSet.has(t.symbol?.toLowerCase()));

    newTokenList.tokens = pinnedTokens.concat(newTokenList.tokens);

    const uniqueSet = new Set();

    newTokenList.tokens = newTokenList.tokens.filter((token) => {
        const key = `${token.chainId}_${token.address}`;

        if (uniqueSet.has(key)) {
            return false;
        }

        uniqueSet.add(key);
        return true;
    });

    console.log(
        `Got ${newTokenList.tokens.length} tokens of ${chains.join(', ')} chains from coingecko top 1000`,
    );

    await writeFile('./tokenlist.json', JSON.stringify(tokenList, null, 2));

    await writeFile('./tokenlist.top.json', JSON.stringify(newTokenList, null, 2));

    await writeFile('./src/tokenlist.ts', `${fileHeader}${JSON.stringify(tokenList, null, 2)};`);

    await writeFile('./src/top.ts', `${fileHeader}${JSON.stringify(newTokenList, null, 2)};`);
}

main();
