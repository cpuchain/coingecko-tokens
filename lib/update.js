"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPinnedList = getPinnedList;
const promises_1 = require("fs/promises");
const ethers_1 = require("ethers");
const getCoingeko_1 = require("./getCoingeko");
const getTopTokens_1 = require("./getTopTokens");
const fileHeader = `/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { TokenList } from '@uniswap/token-lists';

export const tokenlist: TokenList = `;
async function getPinnedList() {
    return JSON.parse(await (0, promises_1.readFile)('./pinnedTokens.json', { encoding: 'utf8' }));
}
async function main() {
    const lists = await (0, getCoingeko_1.getCoingekoLists)();
    const pinnedTokens = await getPinnedList();
    const topTokensSet = await (0, getTopTokens_1.getTopTokens)();
    const tokenList = lists[0];
    lists.forEach((list) => {
        tokenList.tokens.push(...list.tokens);
    });
    // format token addresses since coingecko doesn't
    tokenList.tokens.forEach((token) => {
        // @ts-expect-error override read-only
        token.address = (0, ethers_1.getAddress)(token.address);
    });
    const chains = [...new Set(tokenList.tokens.map(({ chainId }) => chainId))];
    console.log(`Got ${tokenList.tokens.length} tokens of ${chains.join(', ')} chains from coingecko`);
    /**
     * Init top 1000 tokens
     */
    const newTokenList = { ...tokenList };
    newTokenList.tokens = newTokenList.tokens.filter((t) => topTokensSet.has(t.symbol?.toLowerCase()));
    newTokenList.tokens = pinnedTokens.concat(newTokenList.tokens);
    const uniqueSet = new Set();
    newTokenList.tokens = newTokenList.tokens.filter((token) => {
        const key = `${token.chainId}_${token.address}`;
        if (uniqueSet.has(key)) {
            return false;
        }
        uniqueSet.add(key);
        return true;
    });
    console.log(`Got ${newTokenList.tokens.length} tokens of ${chains.join(', ')} chains from coingecko top 1000`);
    await (0, promises_1.writeFile)('./tokenlist.json', JSON.stringify(tokenList, null, 2));
    await (0, promises_1.writeFile)('./tokenlist.top.json', JSON.stringify(newTokenList, null, 2));
    await (0, promises_1.writeFile)('./src/tokenlist.ts', `${fileHeader}${JSON.stringify(tokenList, null, 2)};`);
    await (0, promises_1.writeFile)('./src/top.ts', `${fileHeader}${JSON.stringify(newTokenList, null, 2)};`);
}
main();
